     

     CONTACT APP MANAGEMENT SYSTEM 
   ----------------------------------

   1.Create a new project - ng new contact-app
   2. Run the New Project - ng serve --open
   3. Clear the code in app.compononet.html
   4. Install 3rd party libraries - bootstrap,fontawsome,googlefonts
        --> install bootstrap - npm i bootstrap
            - Configure Bootstrap - 
                In angular.json 
                    "styles": [
                "src/styles.css",
                "node_modules/bootstrap/dist/css/bootstrap.min.css"
                ],
              
                    "scripts": [
                "node_modules/bootstrap/dist/js/bootstrap.bundle.js"
                ]  
            -In index.html
                <!-- bootstrap -->
                 <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
                 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
        --> Install fontawsome
           -- npm install --save @fortawesome/fontawesome-free
           -- paste link in index.html -->  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
         --use google fonts   
   
    5. Create html pages or components
       --> Contact manager - view all contacts - ng g c contactManager
       -->Add Contacts - add new contacts - ng g c addContact
       -->View Contacts - view particular contact - ng g c viewContact
       -->Edit Contacts - edit specific contact - ng g c editContact

    6. Setup Path For Each Component - Routing
        localhost:4200 -> localhost:4200/contactManager
            --> Inside app-routing.module.ts file
                    {
    path:'',redirectTo:'ContactManager',pathMatch:'full'
  },
  //listing all contacts
  {
    path:'ContactManager',component:ContactManagerComponent
  },
  //ading new contacts 
  {
    path:'ContactManager/addContact',component:AddContactComponent
  },
  //view a particular contact
  {
    path:'ContactManager/view/:Id',component:ViewContactComponent
  },
  //edit a particular detail
  {
    path:'ContactManager/edit/:contactId',component:EditContactComponent
  }

7.<router-outlet></router-outlet>
    -page to view seperatly


8. Create Header and Footer components
    
9.Design Full pages

10.API INTEGRATION
    To fetch data and display

    -->Create a server display
    -->Inside it, Create db.json file
    -->goto jsonPlaceholder - my json data - content

  --> Create a package.json file - npm init
  Update package.json as
  -->"start" : "json server --watch db.json --port 3000"

  -->install -  npm i json-server

  --> run backend - npm start

11. Create Model
  -->Create a model folder in src
  -->Inside in it, create myContact.ts file and myGroup.ts file

12. Asynchronous Resolving
      JS                  TS
    Promise             Observable (rxjs - reactive extenson javascript) library

    .then()             .subscribe()
    .catch()            .catch()

    Display all contact information API - get
    View all contact information API - get
    Update all contact information API - put
    Delete all contact information API - delete

13.Create Services
  Services - pass data from one component to another if different component share the same data the we use to create a service 

  to create a service --> ng g service-name --> ng g s services/api


14.To get http methods for api fetching
    --> Import HttpClientModule  in api.module.ts

    import {HttpClientModule} from '@angular/comon/http';

    import[
      HttpClientModule
    ]

15. Dependency injection 
      Data share between two dependent  classes 
      -- It performs inside the contsructor

      Constructor -> Is a spaecial member function 
                  -> It execute first in the class

      Syntax for Dependency Injection
            constructor(acess-specifier variable-name : class-name){}

16. ngOnInit
        --> It is a lifecycle hook
        --> Starting stage of a compnonet creation 
        

17. Data Binding - Data sharing inside a component (ts,html)
      1. One way data binding(ts->html or html to ts)
            (i) Component to view (ts-> html)
                  String interpolation - {{variable-name}} (inside in html)
                  Property binding - [attribute name] = "property-name"

            (ii) View to Component (html to ts)

                  (1) Event binding - (event name) = "function-name"

                  Events
                  ->events are "things" that happen to HTML elemnts
                  ->An HTML webpage has finished loading
                  ->An HTMl INPUT field was changed 
                  ->An HTML button was clicked
                  ->onchange An HTML element has been changed
                  ->onclick The user clicks in an HTML eLement     
                  

                  (2)Event Binding Using $event                                         

                  ->$event is used in function argument
                  ->(event-name)="function-name($event)" (hmtl)
                  ->function-name(event) (ts)

                  (3)Two way Data Binding
                  ->ngModel   -  [(ngModel)]="property-name"
                                -nggModel imports in app.module.ts - FormsModule 
                                Creates a FormControl instance from a 
                                domain model and binds it to a form control element.
                                -> add this to input tag also put name attribute in it.


18. Directives - To manipulate DOM 
      1. Component Directives
      2. Structural Directives
         -->  *ngIf = "condition"

         -->  *ngFor = "let var=name of array-name"
         
19. ActivatedRoute (CLASS)
      Provides access to information about a route associated with a component that is loaded in an outlet.
      Use to traverse the RouterState tree and extract information from nodes.         

      --> Parameters
            -params : An observable of the matrix parameters scoped to this route.

20. Transforming Data Using Pipes
          Pipes are simple functions to use in template expressions to accept an 
          input value and return a transformed value   

          eg: DatePipe - Formats a date value according to locale rules.
              UpperCasePipe - Transforms text to all upper case  

              --> Create a pipe - ng g p pipe/filter     

21. Router (class)
        A service that provides navigation among views
        and URL manipulation capabilities
    -navigateByUrl()
        Navigates to  a view using an absolute route path    
